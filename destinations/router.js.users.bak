'use strict';
const express = require('express');
const bodyParser = require('body-parser');

let { Destination } = require('./models');

const destinationRouter = express.Router();

const jsonParser = bodyParser.json();

// Post to create a new destination
destinationRouter.post('/', jsonParser, (req, res) => {
    console.log("Destinations endpoint hit!");
    const requiredFields = ['name', 'complete' ,'activity'];
    const missingField = requiredFields.find(field => !(field in req.body));

    if (missingField) {
        return res.status(422).json({
            code: 422,
            reason: 'ValidationError',
            message: 'Cannot be empty',
            location: missingField
        });
    }

    let { name, complete, activity} = req.body;
    // Destinationname and password come in pre-trimmed, otherwise we throw an error
    // before this
    name = name.trim();

    return Destination.find({ name })
        .count()
        .then(count => {
            if (count > 0) {
                // There is an existing destination with the same name
                return Promise.reject({
                    code: 422,
                    reason: 'ValidationError',
                    message: 'Destination name already taken',
                    location: 'name'
                });
            }
            // If there is no existing destination, hash the password
            return Destination;
        })
        .then(hash => {
            return Destination.create({
                name,
                complete,
                activity
            });
        })
        .then(destination => {
            return res.status(201).json(destination);
        })
        .catch(err => {
            // Forward validation errors on to the client, otherwise give a 500
            // error because something unexpected has happened
            if (err.reason === 'ValidationError') {
                return res.status(err.code).json(err);
            }
            res.status(500).json({ code: 500, message: 'Internal server error' });
        });
});

destinationRouter.get('/', (req, res) => {
    return Destination.find()
        .then(destinations => res.json(destinations.map()))
        .catch(err => res.status(500).json({ message: 'Internal server error' }));
});

console.log(`This is destinations/router ${typeof destinationRouter} - ${destinationRouter}`);

module.exports = { destinationRouter };
